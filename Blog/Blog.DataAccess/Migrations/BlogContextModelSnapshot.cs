// <auto-generated />
using System;
using Blog.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Blog.DataAccess.Migrations
{
    [DbContext(typeof(BlogContext))]
    partial class BlogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Blog.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Training"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Search Engine Optimization"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Food"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Fashion"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Personal"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Art"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Photography"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Cookbooks"
                        });
                });

            modelBuilder.Entity("Blog.Domain.CategoryPost", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("CategoryPosts");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            PostId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            PostId = 1
                        },
                        new
                        {
                            CategoryId = 4,
                            PostId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            PostId = 2
                        },
                        new
                        {
                            CategoryId = 7,
                            PostId = 2
                        },
                        new
                        {
                            CategoryId = 2,
                            PostId = 3
                        },
                        new
                        {
                            CategoryId = 9,
                            PostId = 4
                        },
                        new
                        {
                            CategoryId = 8,
                            PostId = 5
                        },
                        new
                        {
                            CategoryId = 6,
                            PostId = 5
                        },
                        new
                        {
                            CategoryId = 5,
                            PostId = 6
                        },
                        new
                        {
                            CategoryId = 1,
                            PostId = 6
                        });
                });

            modelBuilder.Entity("Blog.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Helpful",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            PostId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Good",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            PostId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "For me too",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            ParentId = 1,
                            PostId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Content = "Cool!",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            ParentId = 3,
                            PostId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Content = "Great",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            ParentId = 2,
                            PostId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Content = "Ok",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            PostId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            Content = "!!",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            ParentId = 3,
                            PostId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            Content = "Hello",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            PostId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "Share more",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            PostId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            Content = "Cool.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            ParentId = 9,
                            PostId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            Content = "Thanks",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            PostId = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 12,
                            Content = "Wonderful",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            PostId = 6,
                            UserId = 2
                        },
                        new
                        {
                            Id = 13,
                            Content = "Saved",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            PostId = 6,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Blog.Domain.ExceptionLog", b =>
                {
                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("InnerException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("ExceptionLogs");
                });

            modelBuilder.Entity("Blog.Domain.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "In a large bowl, combine the cheeses, confectioners' sugar, cornstarch, vanilla, salt and egg mixture. Pour into prepared pastry.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Title = "Mom's cheese pie",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "In a large bowl, combine the cheeses, confectioners' sugar, cornstarch, vanilla, salt and egg mixture. Pour into prepared pastry.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Title = "Welcome to everyone",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "In a large bowl, combine the cheeses, confectioners' sugar, cornstarch, vanilla, salt and egg mixture. Pour into prepared pastry.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Title = "Spongebob Squarepants",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "In a large bowl, combine the cheeses, confectioners' sugar, cornstarch, vanilla, salt and egg mixture. Pour into prepared pastry.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Title = "New York City",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "In a large bowl, combine the cheeses, confectioners' sugar, cornstarch, vanilla, salt and egg mixture. Pour into prepared pastry.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Title = "Sunset behind the rock",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Content = "In a large bowl, combine the cheeses, confectioners' sugar, cornstarch, vanilla, salt and egg mixture. Pour into prepared pastry.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Title = "Long live the king",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Blog.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Blog.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Pies"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Cookies"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Pasta"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Web Design"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Software"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Legs"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Back"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Siberian cat"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Sunset"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Sunrise"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Cheese"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Soft"
                        });
                });

            modelBuilder.Entity("Blog.Domain.TagPost", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("TagPosts");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            PostId = 1
                        },
                        new
                        {
                            TagId = 2,
                            PostId = 1
                        },
                        new
                        {
                            TagId = 3,
                            PostId = 1
                        },
                        new
                        {
                            TagId = 11,
                            PostId = 2
                        },
                        new
                        {
                            TagId = 12,
                            PostId = 2
                        },
                        new
                        {
                            TagId = 9,
                            PostId = 2
                        },
                        new
                        {
                            TagId = 9,
                            PostId = 3
                        },
                        new
                        {
                            TagId = 5,
                            PostId = 4
                        },
                        new
                        {
                            TagId = 6,
                            PostId = 4
                        },
                        new
                        {
                            TagId = 7,
                            PostId = 5
                        },
                        new
                        {
                            TagId = 11,
                            PostId = 6
                        },
                        new
                        {
                            TagId = 2,
                            PostId = 6
                        },
                        new
                        {
                            TagId = 9,
                            PostId = 6
                        },
                        new
                        {
                            TagId = 10,
                            PostId = 6
                        });
                });

            modelBuilder.Entity("Blog.Domain.UseCaseLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("bit");

                    b.Property<string>("UseCaseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UseCaseLogs");
                });

            modelBuilder.Entity("Blog.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Username");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark@gmail.com",
                            IsActive = false,
                            Name = "Mark",
                            Password = "$2a$11$MLffD1Deu4DEavKxwmIsku51XiBAQ.5UhMynRAgbZEYgKJguyfiPi",
                            RoleId = 2,
                            Username = "mark86"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elenore@gmail.com",
                            IsActive = false,
                            Name = "Elenore",
                            Password = "$2a$11$4KVkaWvvKRYmCOnKIzsObOLn9h/DpP7qAHwc1gUyBs/WA8qdKHqw2",
                            RoleId = 2,
                            Username = "elenore86"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            IsActive = false,
                            Name = "Admin",
                            Password = "$2a$11$0HthCDtrr5yu3UpaMtjdw.ASjWUEg392/OuDKfzyFPcSogxaDOnwK",
                            RoleId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Blog.Domain.UserUseCase", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UseCaseId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UseCaseId");

                    b.ToTable("UserUseCases");

                    b.HasData(
                        new
                        {
                            UserId = 3,
                            UseCaseId = 1
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 2
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 3
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 4
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 5
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 6
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 7
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 8
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 9
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 10
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 11
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 12
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 13
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 14
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 15
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 16
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 17
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 18
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 20
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 23
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 25
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 26
                        },
                        new
                        {
                            UserId = 3,
                            UseCaseId = 27
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 1
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 2
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 3
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 4
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 5
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 6
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 7
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 11
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 12
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 16
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 17
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 18
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 20
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 23
                        },
                        new
                        {
                            UserId = 1,
                            UseCaseId = 25
                        },
                        new
                        {
                            UserId = 2,
                            UseCaseId = 3
                        },
                        new
                        {
                            UserId = 2,
                            UseCaseId = 4
                        },
                        new
                        {
                            UserId = 2,
                            UseCaseId = 5
                        },
                        new
                        {
                            UserId = 2,
                            UseCaseId = 16
                        },
                        new
                        {
                            UserId = 2,
                            UseCaseId = 17
                        });
                });

            modelBuilder.Entity("Blog.Domain.CategoryPost", b =>
                {
                    b.HasOne("Blog.Domain.Category", "Category")
                        .WithMany("CategoryPosts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Blog.Domain.Post", "Post")
                        .WithMany("CategoryPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Blog.Domain.Comment", b =>
                {
                    b.HasOne("Blog.Domain.Comment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Blog.Domain.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Blog.Domain.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog.Domain.Post", b =>
                {
                    b.HasOne("Blog.Domain.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog.Domain.TagPost", b =>
                {
                    b.HasOne("Blog.Domain.Post", "Post")
                        .WithMany("TagPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Blog.Domain.Tag", "Tag")
                        .WithMany("TagPosts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Blog.Domain.User", b =>
                {
                    b.HasOne("Blog.Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Blog.Domain.UserUseCase", b =>
                {
                    b.HasOne("Blog.Domain.User", "User")
                        .WithMany("UseCases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog.Domain.Category", b =>
                {
                    b.Navigation("CategoryPosts");
                });

            modelBuilder.Entity("Blog.Domain.Comment", b =>
                {
                    b.Navigation("ChildComments");
                });

            modelBuilder.Entity("Blog.Domain.Post", b =>
                {
                    b.Navigation("CategoryPosts");

                    b.Navigation("Comments");

                    b.Navigation("TagPosts");
                });

            modelBuilder.Entity("Blog.Domain.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Blog.Domain.Tag", b =>
                {
                    b.Navigation("TagPosts");
                });

            modelBuilder.Entity("Blog.Domain.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("UseCases");
                });
#pragma warning restore 612, 618
        }
    }
}
